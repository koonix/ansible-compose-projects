- name: '[{{ project.name }}] Check the parameters of assets'
  ansible.builtin.assert:
    that: [ unknown_params | length == 0 ]
    fail_msg: 'An asset dict contains unknown parameters: {{ unknown_params | join(", ") }}'
    quiet: true
  vars:
    # update the 'allowed_params' list to reflect supported asset parameters
    allowed_params: [ type, src, content, dest, mode, no_log, pre_update, post_update ]
    unknown_params: |
      {{
        project.assets | default([]) |
        map("ansible.builtin.dict2items") |
        ansible.builtin.flatten |
        map(attribute="key") |
        ansible.builtin.difference(allowed_params)
      }}

- name: '[{{ project.name }}] Create dirs'
  ansible.builtin.file:
    state: directory
    path: '{{ item.path }}'
    mode: '{{ item.mode | default("700") }}'
    owner: root
    group: root
  loop:
    - path: '{{ project_dir }}'

- name: '[{{ project.name }}] Install compose.yml'
  ansible.builtin.template:
    src: compose.yml.j2
    dest: '{{ project_dir }}/compose.yml'
    mode: '644'
    owner: root
    group: root
  register: composefile

- name: '[{{ project.name }}] Validate compose.yml'
  ansible.builtin.command:
    argv: [ docker, compose, config, --quiet ]
    chdir: '{{ project_dir }}'
  changed_when: false

- name: '[{{ project.name }}] Remove extraneous objects from the project dir'
  ansible.builtin.shell:
    chdir: '{{ dir }}'
    cmd: |
      for path in * .*; do
        [ ! -e "$path" ] && continue
        case $path in
          {{ ( [ '.', '..' ] + keep ) | map('ansible.builtin.quote') | join('|') }}) ;;
          *) rm -r -- "$path"; echo removed ;;
        esac
      done
  register: rmextra
  changed_when: "'removed' in rmextra.stdout"
  vars:
    # IMPORTANT: update the 'keep' list to reflect the files that we want to keep
    dir: '{{ project_dir }}'
    keep: '{{ [ "compose.yml" ] + keep1 + keep2 }}'
    keep1: |
      {{
        project.assets | default([]) |
        selectattr("dest", "defined") |
        map(attribute="dest")
      }}
    keep2: |
      {{
        project.assets | default([]) |
        selectattr("dest", "undefined") |
        map(attribute="src") |
        map("ansible.builtin.basename")
      }}

- name: '[{{ project.name }}] Check file assets for changes'
  ansible.builtin.copy:
    src: '{{ item.src | default(omit) }}'
    content: '{{ item.content | default(omit) }}'
    dest: '{{ project_dir }}/{{ item.dest | default(item.src) | ansible.builtin.basename }}'
    mode: '{{ item.mode | default("644") }}'
    owner: root
    group: root
  check_mode: true
  when: item.type | default('file') == 'file'
  no_log: '{{ item.no_log | default(False) }}'
  loop: '{{ project.assets | default([]) }}'
  register: file_assets

- name: '[{{ project.name }}] Check template assets for changes'
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '{{ project_dir }}/{{ item.dest | default(item.src) | ansible.builtin.basename }}'
    mode: '{{ item.mode | default("644") }}'
    owner: root
    group: root
  check_mode: true
  when: item.type | default('file') == 'template'
  no_log: '{{ item.no_log | default(False) }}'
  loop: '{{ project.assets | default([]) }}'
  register: template_assets

- name: '[{{ project.name }}] Run pre-update hooks of assets'
  ansible.builtin.command:
    argv: '{{ argv }}'
    chdir: '{{ project_dir }}'
  changed_when: true
  loop: '{{ hooks | ansible.builtin.unique }}'
  vars:
    argv: &argv |
      {% if item == "stop" %}
      {{ [ "docker", "compose", "stop" ] }}
      {% elif item == "down" %}
      {{ [ "docker", "compose", "down" ] }}
      {% elif item == "build" %}
      {{ [ "docker", "compose", "build" ] }}
      {% else %}
      {{ item }}
      {% endif %}
    hooks: |
      {{
        ( file_assets.results + template_assets.results ) |
        selectattr("changed", "equalto", True) |
        map(attribute="item") |
        selectattr("pre_update", "defined") |
        map(attribute="pre_update") |
        ansible.builtin.flatten(levels=1)
      }}

- name: '[{{ project.name }}] Install file assets'
  ansible.builtin.copy:
    src: '{{ item.src | default(omit) }}'
    content: '{{ item.content | default(omit) }}'
    dest: '{{ project_dir }}/{{ item.dest | default(item.src) | ansible.builtin.basename }}'
    mode: '{{ item.mode | default("644") }}'
    owner: root
    group: root
  when: item.type | default('file') == 'file'
  no_log: '{{ item.no_log | default(False) }}'
  loop: '{{ project.assets | default([]) }}'
  register: file_assets

- name: '[{{ project.name }}] Install template assets'
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '{{ project_dir }}/{{ item.dest | default(item.src) | ansible.builtin.basename }}'
    mode: '{{ item.mode | default("644") }}'
    owner: root
    group: root
  when: item.type | default('file') == 'template'
  no_log: '{{ item.no_log | default(False) }}'
  loop: '{{ project.assets | default([]) }}'
  register: template_assets

- name: '[{{ project.name }}] Run post-update hooks of assets and compose.yml'
  ansible.builtin.command:
    argv: '{{ argv }}'
    chdir: '{{ project_dir }}'
  changed_when: true
  loop: '{{ hooks | ansible.builtin.unique }}'
  vars:
    argv: *argv
    hooks: '{{ compose_hooks + asset_hooks }}'
    compose_hooks: '{{ composefile.changed | ansible.builtin.ternary([ "build" ], []) }}'
    asset_hooks: |
      {{
        ( file_assets.results + template_assets.results ) |
        selectattr("changed", "equalto", True) |
        map(attribute="item") |
        selectattr("post_update", "defined") |
        map(attribute="post_update") |
        ansible.builtin.flatten(levels=1)
      }}

- name: '[{{ project.name }}] Check the project for changes'
  ansible.builtin.command:
    argv: [ docker, compose, up, --dry-run, --detach, --remove-orphans ]
    chdir: '{{ project_dir }}'
  register: compose
  changed_when: '"Created" in compose.stderr'

- name: '[{{ project.name }}] Run pre-start hooks'
  ansible.builtin.command:
    argv: '{{ item }}'
    chdir: '{{ project_dir }}'
  changed_when: true
  loop: '{{ project.pre_start | default([]) }}'
  when: compose.changed

- name: '[{{ project.name }}] Start the project'
  ansible.builtin.command:
    argv: [ docker, compose, up, --detach, --remove-orphans ]
    chdir: '{{ project_dir }}'
  register: compose
  changed_when: '"Started" in compose.stderr'

- name: '[{{ project.name }}] Run post-start hooks'
  ansible.builtin.command:
    argv: '{{ item }}'
    chdir: '{{ project_dir }}'
  changed_when: true
  loop: '{{ project.post_start | default([]) }}'
  when: compose.changed
